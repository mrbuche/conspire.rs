#![cfg(feature = "fem")]

use conspire::{
    constitutive::solid::hyperelastic::NeoHookean,
    fem::{
        Connectivity, ElementBlock, FiniteElementBlock, LinearHexahedron,
        ReferenceNodalCoordinatesBlock,
    },
    math::{
        Matrix, Tensor, TensorVec, TestError, Vector,
        optimize::{EqualityConstraint, GradientDescent, NewtonRaphson},
    },
};

const N: usize = 8;

fn connectivity() -> Connectivity<N> {
    vec![
        [34, 379, 317, 380, 381, 318, 289, 319],
        [12, 367, 310, 369, 368, 311, 290, 312],
        [8, 411, 335, 414, 412, 336, 291, 337],
        [42, 424, 342, 426, 425, 343, 292, 344],
        [40, 346, 297, 345, 347, 299, 293, 298],
        [14, 358, 304, 359, 360, 305, 294, 306],
        [10, 399, 329, 400, 401, 330, 295, 331],
        [30, 389, 322, 387, 388, 324, 296, 323],
        [55, 80, 85, 110, 115, 140, 145, 170],
        [28, 352, 301, 407, 4, 374, 315, 383],
        [44, 348, 356, 16, 349, 300, 303, 357],
        [20, 354, 385, 38, 402, 302, 321, 418],
        [288, 350, 375, 284, 268, 362, 365, 264],
        [64, 124, 161, 101, 430, 444, 455, 441],
        [280, 355, 363, 256, 276, 386, 395, 248],
        [272, 361, 366, 260, 353, 307, 309, 480],
        [252, 364, 308, 478, 244, 396, 327, 476],
        [71, 434, 437, 94, 131, 448, 451, 154],
        [24, 370, 377, 46, 371, 313, 316, 378],
        [240, 474, 314, 372, 232, 472, 333, 406],
        [236, 228, 408, 373, 224, 216, 417, 382],
        [220, 212, 419, 384, 470, 468, 339, 320],
        [22, 32, 397, 390, 391, 398, 328, 325],
        [204, 393, 420, 200, 466, 326, 340, 464],
        [208, 392, 404, 188, 196, 421, 409, 184],
        [192, 403, 332, 462, 180, 410, 334, 460],
        [6, 415, 338, 416, 48, 422, 341, 423],
        [49, 58, 27, 287, 279, 19, 39, 43],
        [40, 345, 297, 346, 28, 352, 301, 407],
        [40, 345, 348, 44, 347, 298, 300, 349],
        [40, 347, 354, 20, 346, 299, 302, 402],
        [345, 352, 28, 40, 348, 350, 288, 44],
        [20, 40, 346, 402, 57, 28, 407, 427],
        [44, 40, 347, 349, 280, 20, 354, 355],
        [44, 348, 350, 288, 16, 356, 362, 268],
        [16, 256, 280, 44, 357, 363, 355, 349],
        [44, 16, 268, 288, 280, 256, 73, 50],
        [28, 288, 350, 352, 4, 284, 375, 374],
        [51, 286, 282, 106, 76, 266, 262, 81],
        [52, 285, 25, 59, 105, 281, 1, 98],
        [60, 26, 405, 428, 97, 2, 376, 439],
        [20, 354, 355, 280, 38, 385, 386, 276],
        [61, 18, 36, 121, 429, 394, 413, 443],
        [53, 277, 273, 113, 62, 17, 35, 122],
        [54, 77, 137, 114, 278, 254, 246, 274],
        [56, 116, 169, 109, 63, 123, 162, 102],
        [65, 74, 267, 271, 251, 255, 15, 13],
        [16, 356, 358, 14, 357, 303, 305, 360],
        [16, 356, 362, 268, 14, 358, 361, 272],
        [14, 16, 357, 360, 252, 256, 363, 364],
        [14, 358, 361, 272, 359, 304, 307, 353],
        [14, 359, 478, 252, 360, 306, 308, 364],
        [14, 359, 353, 272, 252, 478, 431, 66],
        [268, 272, 361, 362, 264, 260, 366, 365],
        [67, 270, 258, 90, 432, 351, 479, 435],
        [68, 269, 265, 75, 89, 257, 261, 82],
        [256, 363, 364, 252, 248, 395, 396, 244],
        [69, 249, 241, 129, 78, 253, 245, 138],
        [70, 433, 447, 130, 250, 477, 475, 242],
        [72, 132, 153, 93, 79, 139, 146, 86],
        [83, 263, 23, 235, 92, 259, 11, 239],
        [375, 284, 264, 365, 377, 46, 24, 370],
        [365, 370, 24, 264, 366, 367, 12, 260],
        [264, 24, 46, 284, 84, 236, 224, 107],
        [260, 366, 367, 12, 480, 309, 311, 368],
        [260, 480, 368, 12, 91, 436, 474, 240],
        [24, 12, 367, 370, 371, 369, 310, 313],
        [369, 12, 368, 312, 372, 240, 474, 314],
        [12, 240, 372, 369, 24, 236, 373, 371],
        [24, 236, 373, 371, 46, 224, 382, 378],
        [88, 148, 226, 234, 111, 171, 214, 222],
        [87, 96, 237, 233, 147, 156, 229, 225],
        [95, 438, 473, 238, 155, 452, 471, 230],
        [240, 232, 406, 372, 236, 228, 408, 373],
        [99, 3, 33, 219, 108, 283, 45, 223],
        [4, 374, 315, 383, 34, 379, 317, 380],
        [374, 379, 34, 4, 375, 377, 46, 284],
        [4, 34, 380, 383, 100, 220, 470, 440],
        [34, 46, 377, 379, 381, 378, 316, 318],
        [46, 224, 382, 378, 34, 220, 384, 381],
        [34, 220, 384, 381, 380, 470, 320, 319],
        [104, 164, 210, 218, 442, 456, 467, 469],
        [103, 112, 221, 217, 163, 172, 213, 209],
        [224, 216, 417, 382, 220, 212, 419, 384],
        [117, 275, 21, 207, 126, 37, 29, 203],
        [38, 385, 389, 30, 418, 321, 324, 388],
        [30, 38, 418, 388, 204, 125, 445, 466],
        [38, 385, 386, 276, 30, 389, 391, 22],
        [22, 276, 248, 32, 391, 386, 395, 398],
        [22, 32, 248, 276, 208, 188, 141, 118],
        [119, 144, 149, 174, 206, 186, 182, 194],
        [120, 205, 193, 173, 127, 201, 197, 166],
        [128, 202, 198, 165, 446, 465, 463, 457],
        [30, 22, 390, 387, 389, 391, 325, 322],
        [30, 387, 393, 204, 388, 323, 326, 466],
        [30, 387, 390, 22, 204, 393, 392, 208],
        [32, 188, 208, 22, 397, 404, 392, 390],
        [208, 392, 421, 196, 204, 393, 420, 200],
        [133, 243, 9, 191, 142, 247, 31, 187],
        [248, 395, 396, 244, 32, 398, 401, 10],
        [10, 244, 476, 399, 401, 396, 327, 330],
        [10, 399, 476, 244, 192, 462, 449, 134],
        [135, 450, 453, 158, 190, 461, 459, 178],
        [136, 189, 177, 157, 143, 185, 181, 150],
        [32, 10, 400, 397, 398, 401, 331, 328],
        [32, 397, 400, 10, 188, 404, 403, 192],
        [399, 462, 192, 10, 329, 332, 403, 400],
        [192, 403, 410, 180, 188, 404, 409, 184],
        [151, 160, 231, 227, 183, 179, 7, 5],
        [6, 48, 216, 228, 184, 196, 175, 152],
        [8, 232, 472, 411, 180, 159, 454, 460],
        [232, 472, 333, 406, 8, 411, 335, 414],
        [406, 232, 8, 414, 408, 228, 6, 416],
        [228, 6, 416, 408, 216, 48, 423, 417],
        [184, 409, 415, 6, 196, 421, 422, 48],
        [180, 184, 409, 410, 8, 6, 415, 412],
        [8, 180, 460, 411, 412, 410, 334, 336],
        [414, 8, 412, 337, 416, 6, 415, 338],
        [167, 176, 215, 211, 199, 195, 47, 41],
        [42, 425, 468, 212, 200, 464, 458, 168],
        [216, 48, 423, 417, 212, 42, 426, 419],
        [212, 42, 426, 419, 468, 425, 344, 339],
        [200, 420, 424, 42, 464, 340, 343, 425],
        [196, 200, 420, 421, 48, 42, 424, 422],
        [48, 422, 341, 423, 42, 424, 342, 426],
        [49, 50, 51, 52, 53, 54, 55, 56],
        [49, 287, 288, 50, 279, 43, 44, 280],
        [49, 287, 27, 58, 52, 285, 25, 59],
        [49, 279, 277, 53, 58, 19, 17, 62],
        [287, 285, 52, 49, 288, 286, 51, 50],
        [49, 50, 54, 53, 279, 280, 278, 277],
        [52, 49, 53, 56, 59, 58, 62, 63],
        [50, 288, 286, 51, 73, 268, 266, 76],
        [50, 73, 77, 54, 280, 256, 254, 278],
        [50, 73, 76, 51, 54, 77, 80, 55],
        [52, 51, 286, 285, 105, 106, 282, 281],
        [106, 51, 76, 81, 110, 55, 80, 85],
        [51, 55, 110, 106, 52, 56, 109, 105],
        [52, 56, 109, 105, 59, 63, 102, 98],
        [53, 54, 114, 113, 277, 278, 274, 273],
        [53, 113, 116, 56, 62, 122, 123, 63],
        [53, 54, 55, 56, 113, 114, 115, 116],
        [54, 77, 80, 55, 114, 137, 140, 115],
        [110, 55, 115, 170, 109, 56, 116, 169],
        [57, 58, 59, 60, 61, 62, 63, 64],
        [57, 28, 27, 58, 20, 40, 39, 19],
        [28, 407, 427, 57, 26, 405, 428, 60],
        [57, 20, 18, 61, 427, 402, 394, 429],
        [57, 28, 26, 60, 58, 27, 25, 59],
        [57, 58, 62, 61, 20, 19, 17, 18],
        [60, 57, 61, 64, 428, 427, 429, 430],
        [60, 59, 25, 26, 97, 98, 1, 2],
        [59, 63, 102, 98, 60, 64, 101, 97],
        [60, 64, 101, 97, 428, 430, 441, 439],
        [61, 62, 122, 121, 18, 17, 35, 36],
        [61, 121, 124, 64, 429, 443, 444, 430],
        [61, 62, 63, 64, 121, 122, 123, 124],
        [63, 123, 162, 102, 64, 124, 161, 101],
        [65, 66, 67, 68, 69, 70, 71, 72],
        [65, 271, 272, 66, 251, 13, 14, 252],
        [65, 271, 267, 74, 68, 269, 265, 75],
        [65, 251, 249, 69, 74, 255, 253, 78],
        [271, 269, 68, 65, 272, 270, 67, 66],
        [65, 66, 70, 69, 251, 252, 250, 249],
        [68, 65, 69, 72, 75, 74, 78, 79],
        [66, 272, 270, 67, 431, 353, 351, 432],
        [66, 431, 433, 70, 252, 478, 477, 250],
        [66, 431, 432, 67, 70, 433, 434, 71],
        [68, 67, 270, 269, 89, 90, 258, 257],
        [90, 67, 432, 435, 94, 71, 434, 437],
        [67, 71, 94, 90, 68, 72, 93, 89],
        [68, 72, 93, 89, 75, 79, 86, 82],
        [69, 70, 130, 129, 249, 250, 242, 241],
        [69, 129, 132, 72, 78, 138, 139, 79],
        [69, 70, 71, 72, 129, 130, 131, 132],
        [70, 433, 434, 71, 130, 447, 448, 131],
        [94, 71, 131, 154, 93, 72, 132, 153],
        [73, 74, 75, 76, 77, 78, 79, 80],
        [73, 268, 267, 74, 256, 16, 15, 255],
        [73, 268, 266, 76, 74, 267, 265, 75],
        [73, 74, 78, 77, 256, 255, 253, 254],
        [76, 75, 265, 266, 81, 82, 261, 262],
        [75, 79, 86, 82, 76, 80, 85, 81],
        [77, 78, 138, 137, 254, 253, 245, 246],
        [77, 78, 79, 80, 137, 138, 139, 140],
        [79, 139, 146, 86, 80, 140, 145, 85],
        [81, 82, 83, 84, 85, 86, 87, 88],
        [282, 106, 81, 262, 284, 107, 84, 264],
        [262, 264, 84, 81, 261, 263, 83, 82],
        [84, 81, 85, 88, 107, 106, 110, 111],
        [82, 261, 263, 83, 89, 257, 259, 92],
        [82, 89, 92, 83, 86, 93, 96, 87],
        [84, 83, 263, 264, 236, 235, 23, 24],
        [235, 83, 92, 239, 233, 87, 96, 237],
        [83, 87, 233, 235, 84, 88, 234, 236],
        [84, 88, 234, 236, 107, 111, 222, 224],
        [85, 145, 148, 88, 110, 170, 171, 111],
        [85, 86, 87, 88, 145, 146, 147, 148],
        [86, 93, 96, 87, 146, 153, 156, 147],
        [233, 87, 147, 225, 234, 88, 148, 226],
        [89, 90, 91, 92, 93, 94, 95, 96],
        [89, 257, 259, 92, 90, 258, 260, 91],
        [90, 258, 260, 91, 435, 479, 480, 436],
        [90, 435, 436, 91, 94, 437, 438, 95],
        [92, 91, 260, 259, 239, 240, 12, 11],
        [240, 91, 436, 474, 238, 95, 438, 473],
        [91, 95, 238, 240, 92, 96, 237, 239],
        [93, 94, 95, 96, 153, 154, 155, 156],
        [94, 437, 438, 95, 154, 451, 452, 155],
        [238, 95, 155, 230, 237, 96, 156, 229],
        [97, 98, 99, 100, 101, 102, 103, 104],
        [97, 2, 376, 439, 100, 4, 383, 440],
        [97, 2, 4, 100, 98, 1, 3, 99],
        [100, 97, 101, 104, 440, 439, 441, 442],
        [98, 1, 3, 99, 105, 281, 283, 108],
        [98, 105, 108, 99, 102, 109, 112, 103],
        [100, 99, 3, 4, 220, 219, 33, 34],
        [219, 99, 108, 223, 217, 103, 112, 221],
        [99, 103, 217, 219, 100, 104, 218, 220],
        [100, 104, 218, 220, 440, 442, 469, 470],
        [101, 161, 164, 104, 441, 455, 456, 442],
        [101, 102, 103, 104, 161, 162, 163, 164],
        [102, 109, 112, 103, 162, 169, 172, 163],
        [217, 103, 163, 209, 218, 104, 164, 210],
        [105, 106, 107, 108, 109, 110, 111, 112],
        [105, 281, 283, 108, 106, 282, 284, 107],
        [108, 107, 284, 283, 223, 224, 46, 45],
        [107, 111, 222, 224, 108, 112, 221, 223],
        [109, 110, 111, 112, 169, 170, 171, 172],
        [111, 171, 214, 222, 112, 172, 213, 221],
        [113, 114, 115, 116, 117, 118, 119, 120],
        [113, 273, 275, 117, 122, 35, 37, 126],
        [114, 118, 117, 113, 274, 276, 275, 273],
        [113, 117, 120, 116, 122, 126, 127, 123],
        [114, 137, 141, 118, 274, 246, 248, 276],
        [114, 137, 140, 115, 118, 141, 144, 119],
        [115, 140, 145, 170, 119, 144, 149, 174],
        [115, 119, 174, 170, 116, 120, 173, 169],
        [116, 120, 173, 169, 123, 127, 166, 162],
        [117, 118, 208, 207, 275, 276, 22, 21],
        [117, 207, 205, 120, 126, 203, 201, 127],
        [117, 118, 119, 120, 207, 208, 206, 205],
        [118, 141, 144, 119, 208, 188, 186, 206],
        [174, 119, 206, 194, 173, 120, 205, 193],
        [121, 122, 123, 124, 125, 126, 127, 128],
        [121, 36, 38, 125, 443, 413, 418, 445],
        [122, 126, 125, 121, 35, 37, 38, 36],
        [121, 125, 128, 124, 443, 445, 446, 444],
        [123, 127, 166, 162, 124, 128, 165, 161],
        [124, 128, 165, 161, 444, 446, 457, 455],
        [125, 126, 203, 204, 38, 37, 29, 30],
        [125, 204, 202, 128, 445, 466, 465, 446],
        [125, 126, 127, 128, 204, 203, 201, 202],
        [127, 201, 197, 166, 128, 202, 198, 165],
        [129, 130, 131, 132, 133, 134, 135, 136],
        [129, 241, 243, 133, 138, 245, 247, 142],
        [130, 134, 133, 129, 242, 244, 243, 241],
        [129, 133, 136, 132, 138, 142, 143, 139],
        [130, 447, 449, 134, 242, 475, 476, 244],
        [130, 447, 448, 131, 134, 449, 450, 135],
        [131, 448, 451, 154, 135, 450, 453, 158],
        [131, 135, 158, 154, 132, 136, 157, 153],
        [132, 136, 157, 153, 139, 143, 150, 146],
        [133, 134, 192, 191, 243, 244, 10, 9],
        [133, 191, 189, 136, 142, 187, 185, 143],
        [133, 134, 135, 136, 191, 192, 190, 189],
        [134, 449, 450, 135, 192, 462, 461, 190],
        [158, 135, 190, 178, 157, 136, 189, 177],
        [137, 138, 139, 140, 141, 142, 143, 144],
        [138, 142, 141, 137, 245, 247, 248, 246],
        [139, 143, 150, 146, 140, 144, 149, 145],
        [141, 142, 187, 188, 248, 247, 31, 32],
        [141, 142, 143, 144, 188, 187, 185, 186],
        [143, 185, 181, 150, 144, 186, 182, 149],
        [145, 146, 147, 148, 149, 150, 151, 152],
        [145, 149, 152, 148, 170, 174, 175, 171],
        [146, 153, 156, 147, 150, 157, 160, 151],
        [147, 156, 229, 225, 151, 160, 231, 227],
        [147, 151, 227, 225, 148, 152, 228, 226],
        [148, 152, 228, 226, 171, 175, 216, 214],
        [149, 182, 184, 152, 174, 194, 196, 175],
        [149, 150, 151, 152, 182, 181, 183, 184],
        [150, 157, 160, 151, 181, 177, 179, 183],
        [227, 151, 183, 5, 228, 152, 184, 6],
        [153, 154, 155, 156, 157, 158, 159, 160],
        [154, 451, 452, 155, 158, 453, 454, 159],
        [155, 452, 471, 230, 159, 454, 472, 232],
        [155, 159, 232, 230, 156, 160, 231, 229],
        [157, 158, 159, 160, 177, 178, 180, 179],
        [158, 453, 454, 159, 178, 459, 460, 180],
        [232, 159, 180, 8, 231, 160, 179, 7],
        [161, 162, 163, 164, 165, 166, 167, 168],
        [161, 165, 168, 164, 455, 457, 458, 456],
        [162, 169, 172, 163, 166, 173, 176, 167],
        [163, 172, 213, 209, 167, 176, 215, 211],
        [163, 167, 211, 209, 164, 168, 212, 210],
        [164, 168, 212, 210, 456, 458, 468, 467],
        [165, 198, 200, 168, 457, 463, 464, 458],
        [165, 166, 167, 168, 198, 197, 199, 200],
        [166, 173, 176, 167, 197, 193, 195, 199],
        [211, 167, 199, 41, 212, 168, 200, 42],
        [169, 170, 171, 172, 173, 174, 175, 176],
        [171, 175, 216, 214, 172, 176, 215, 213],
        [173, 174, 175, 176, 193, 194, 196, 195],
        [48, 216, 175, 196, 47, 215, 176, 195],
        [189, 177, 181, 185, 191, 179, 183, 187],
        [179, 191, 192, 180, 183, 187, 188, 184],
        [178, 177, 189, 190, 180, 179, 191, 192],
        [190, 461, 459, 178, 192, 462, 460, 180],
        [8, 7, 179, 180, 6, 5, 183, 184],
        [181, 182, 186, 185, 183, 184, 188, 187],
        [206, 186, 182, 194, 208, 188, 184, 196],
        [187, 188, 32, 31, 191, 192, 10, 9],
        [205, 193, 197, 201, 207, 195, 199, 203],
        [195, 207, 208, 196, 199, 203, 204, 200],
        [194, 193, 205, 206, 196, 195, 207, 208],
        [48, 47, 195, 196, 42, 41, 199, 200],
        [197, 198, 202, 201, 199, 200, 204, 203],
        [202, 198, 463, 465, 204, 200, 464, 466],
        [203, 204, 30, 29, 207, 208, 22, 21],
        [221, 217, 209, 213, 223, 219, 211, 215],
        [211, 219, 220, 212, 215, 223, 224, 216],
        [217, 218, 210, 209, 219, 220, 212, 211],
        [210, 218, 469, 467, 212, 220, 470, 468],
        [211, 212, 42, 41, 215, 216, 48, 47],
        [222, 221, 213, 214, 224, 223, 215, 216],
        [226, 234, 222, 214, 228, 236, 224, 216],
        [219, 33, 34, 220, 223, 45, 46, 224],
        [237, 233, 225, 229, 239, 235, 227, 231],
        [227, 235, 236, 228, 231, 239, 240, 232],
        [233, 234, 226, 225, 235, 236, 228, 227],
        [227, 228, 6, 5, 231, 232, 8, 7],
        [238, 237, 229, 230, 240, 239, 231, 232],
        [473, 238, 230, 471, 474, 240, 232, 472],
        [235, 23, 24, 236, 239, 11, 12, 240],
        [241, 245, 253, 249, 243, 247, 255, 251],
        [243, 251, 252, 244, 247, 255, 256, 248],
        [249, 250, 242, 241, 251, 252, 244, 243],
        [250, 477, 475, 242, 252, 478, 476, 244],
        [243, 244, 10, 9, 247, 248, 32, 31],
        [254, 253, 245, 246, 256, 255, 247, 248],
        [278, 254, 246, 274, 280, 256, 248, 276],
        [251, 13, 14, 252, 255, 15, 16, 256],
        [269, 265, 261, 257, 271, 267, 263, 259],
        [259, 260, 272, 271, 263, 264, 268, 267],
        [269, 257, 258, 270, 271, 259, 260, 272],
        [270, 258, 479, 351, 272, 260, 480, 353],
        [259, 11, 12, 260, 263, 23, 24, 264],
        [266, 262, 261, 265, 268, 264, 263, 267],
        [286, 282, 262, 266, 288, 284, 264, 268],
        [268, 267, 15, 16, 272, 271, 13, 14],
        [273, 35, 17, 277, 275, 37, 19, 279],
        [275, 279, 280, 276, 37, 19, 20, 38],
        [277, 278, 274, 273, 279, 280, 276, 275],
        [275, 276, 22, 21, 37, 38, 30, 29],
        [279, 43, 44, 280, 19, 39, 40, 20],
        [285, 25, 1, 281, 287, 27, 3, 283],
        [283, 284, 288, 287, 3, 4, 28, 27],
        [285, 281, 282, 286, 287, 283, 284, 288],
        [283, 45, 46, 284, 3, 33, 34, 4],
        [287, 288, 44, 43, 27, 28, 40, 39],
        [26, 2, 1, 25, 28, 4, 3, 27],
        [405, 376, 2, 26, 407, 383, 4, 28],
        [18, 17, 35, 36, 20, 19, 37, 38],
        [36, 413, 394, 18, 38, 418, 402, 20],
    ]
}

fn coordinates() -> ReferenceNodalCoordinatesBlock {
    ReferenceNodalCoordinatesBlock::new(&[
        [18.75, 22.5, 45.833333333333336],
        [6.25, 21.666666666666668, 45.833333333333336],
        [20.3125, 20.0, 37.5],
        [11.458333333333334, 12.916666666666666, 37.5],
        [71.875, 78.125, 21.875],
        [63.75, 86.25, 13.75],
        [78.125, 78.125, 21.875],
        [86.25, 86.25, 13.75],
        [78.125, 78.125, 78.125],
        [86.25, 86.25, 86.25],
        [78.125, 21.875, 21.875],
        [86.25, 13.75, 13.75],
        [78.125, 21.875, 78.125],
        [86.25, 13.75, 86.25],
        [71.875, 21.875, 78.125],
        [63.75, 13.75, 86.25],
        [18.75, 45.833333333333336, 77.5],
        [6.25, 45.833333333333336, 78.333_333_333_333_33],
        [20.3125, 37.5, 80.0],
        [11.458333333333334, 37.5, 87.083_333_333_333_33],
        [28.125, 78.125, 78.125],
        [36.25, 86.25, 86.25],
        [71.875, 21.875, 21.875],
        [63.75, 13.75, 13.75],
        [18.75, 22.5, 54.166666666666664],
        [6.25, 21.666666666666668, 54.166666666666664],
        [20.3125, 20.0, 62.5],
        [11.458333333333334, 12.916666666666666, 62.5],
        [21.875, 78.125, 78.125],
        [13.75, 86.25, 86.25],
        [71.875, 78.125, 78.125],
        [63.75, 86.25, 86.25],
        [21.875, 21.875, 21.875],
        [13.75, 13.75, 13.75],
        [18.75, 54.166666666666664, 77.5],
        [6.25, 54.166666666666664, 78.333_333_333_333_33],
        [20.3125, 62.5, 80.0],
        [11.458333333333334, 62.5, 87.083_333_333_333_33],
        [21.875, 21.875, 78.125],
        [13.75, 13.75, 86.25],
        [21.875, 78.125, 21.875],
        [13.75, 86.25, 13.75],
        [28.125, 21.875, 78.125],
        [36.25, 13.75, 86.25],
        [28.125, 21.875, 21.875],
        [36.25, 13.75, 13.75],
        [28.125, 78.125, 21.875],
        [36.25, 86.25, 13.75],
        [31.25, 31.25, 68.75],
        [43.75, 31.25, 68.75],
        [43.75, 31.25, 56.25],
        [31.25, 31.25, 56.25],
        [31.25, 43.75, 68.75],
        [43.75, 43.75, 68.75],
        [43.75, 43.75, 56.25],
        [31.25, 43.75, 56.25],
        [6.25, 31.25, 68.75],
        [18.75, 31.25, 68.75],
        [18.75, 31.25, 56.25],
        [6.25, 31.25, 56.25],
        [6.25, 43.75, 68.75],
        [18.75, 43.75, 68.75],
        [18.75, 43.75, 56.25],
        [6.25, 43.75, 56.25],
        [81.25, 31.25, 68.75],
        [93.75, 31.25, 68.75],
        [93.75, 31.25, 56.25],
        [81.25, 31.25, 56.25],
        [81.25, 43.75, 68.75],
        [93.75, 43.75, 68.75],
        [93.75, 43.75, 56.25],
        [81.25, 43.75, 56.25],
        [56.25, 31.25, 68.75],
        [68.75, 31.25, 68.75],
        [68.75, 31.25, 56.25],
        [56.25, 31.25, 56.25],
        [56.25, 43.75, 68.75],
        [68.75, 43.75, 68.75],
        [68.75, 43.75, 56.25],
        [56.25, 43.75, 56.25],
        [56.25, 31.25, 43.75],
        [68.75, 31.25, 43.75],
        [68.75, 31.25, 31.25],
        [56.25, 31.25, 31.25],
        [56.25, 43.75, 43.75],
        [68.75, 43.75, 43.75],
        [68.75, 43.75, 31.25],
        [56.25, 43.75, 31.25],
        [81.25, 31.25, 43.75],
        [93.75, 31.25, 43.75],
        [93.75, 31.25, 31.25],
        [81.25, 31.25, 31.25],
        [81.25, 43.75, 43.75],
        [93.75, 43.75, 43.75],
        [93.75, 43.75, 31.25],
        [81.25, 43.75, 31.25],
        [6.25, 31.25, 43.75],
        [18.75, 31.25, 43.75],
        [18.75, 31.25, 31.25],
        [6.25, 31.25, 31.25],
        [6.25, 43.75, 43.75],
        [18.75, 43.75, 43.75],
        [18.75, 43.75, 31.25],
        [6.25, 43.75, 31.25],
        [31.25, 31.25, 43.75],
        [43.75, 31.25, 43.75],
        [43.75, 31.25, 31.25],
        [31.25, 31.25, 31.25],
        [31.25, 43.75, 43.75],
        [43.75, 43.75, 43.75],
        [43.75, 43.75, 31.25],
        [31.25, 43.75, 31.25],
        [31.25, 56.25, 68.75],
        [43.75, 56.25, 68.75],
        [43.75, 56.25, 56.25],
        [31.25, 56.25, 56.25],
        [31.25, 68.75, 68.75],
        [43.75, 68.75, 68.75],
        [43.75, 68.75, 56.25],
        [31.25, 68.75, 56.25],
        [6.25, 56.25, 68.75],
        [18.75, 56.25, 68.75],
        [18.75, 56.25, 56.25],
        [6.25, 56.25, 56.25],
        [6.25, 68.75, 68.75],
        [18.75, 68.75, 68.75],
        [18.75, 68.75, 56.25],
        [6.25, 68.75, 56.25],
        [81.25, 56.25, 68.75],
        [93.75, 56.25, 68.75],
        [93.75, 56.25, 56.25],
        [81.25, 56.25, 56.25],
        [81.25, 68.75, 68.75],
        [93.75, 68.75, 68.75],
        [93.75, 68.75, 56.25],
        [81.25, 68.75, 56.25],
        [56.25, 56.25, 68.75],
        [68.75, 56.25, 68.75],
        [68.75, 56.25, 56.25],
        [56.25, 56.25, 56.25],
        [56.25, 68.75, 68.75],
        [68.75, 68.75, 68.75],
        [68.75, 68.75, 56.25],
        [56.25, 68.75, 56.25],
        [56.25, 56.25, 43.75],
        [68.75, 56.25, 43.75],
        [68.75, 56.25, 31.25],
        [56.25, 56.25, 31.25],
        [56.25, 68.75, 43.75],
        [68.75, 68.75, 43.75],
        [68.75, 68.75, 31.25],
        [56.25, 68.75, 31.25],
        [81.25, 56.25, 43.75],
        [93.75, 56.25, 43.75],
        [93.75, 56.25, 31.25],
        [81.25, 56.25, 31.25],
        [81.25, 68.75, 43.75],
        [93.75, 68.75, 43.75],
        [93.75, 68.75, 31.25],
        [81.25, 68.75, 31.25],
        [6.25, 56.25, 43.75],
        [18.75, 56.25, 43.75],
        [18.75, 56.25, 31.25],
        [6.25, 56.25, 31.25],
        [6.25, 68.75, 43.75],
        [18.75, 68.75, 43.75],
        [18.75, 68.75, 31.25],
        [6.25, 68.75, 31.25],
        [31.25, 56.25, 43.75],
        [43.75, 56.25, 43.75],
        [43.75, 56.25, 31.25],
        [31.25, 56.25, 31.25],
        [31.25, 68.75, 43.75],
        [43.75, 68.75, 43.75],
        [43.75, 68.75, 31.25],
        [31.25, 68.75, 31.25],
        [81.25, 77.5, 45.833333333333336],
        [93.75, 78.333_333_333_333_33, 45.833333333333336],
        [79.6875, 80.0, 37.5],
        [88.541_666_666_666_67, 87.083_333_333_333_33, 37.5],
        [68.75, 77.5, 45.833333333333336],
        [56.25, 78.333_333_333_333_33, 45.833333333333336],
        [70.3125, 80.0, 37.5],
        [61.458333333333336, 87.083_333_333_333_33, 37.5],
        [68.75, 77.5, 54.166666666666664],
        [56.25, 78.333_333_333_333_33, 54.166666666666664],
        [70.3125, 80.0, 62.5],
        [61.458333333333336, 87.083_333_333_333_33, 62.5],
        [81.25, 77.5, 54.166666666666664],
        [93.75, 78.333_333_333_333_33, 54.166666666666664],
        [79.6875, 80.0, 62.5],
        [88.541_666_666_666_67, 87.083_333_333_333_33, 62.5],
        [31.25, 77.5, 45.833333333333336],
        [43.75, 78.333_333_333_333_33, 45.833333333333336],
        [29.6875, 80.0, 37.5],
        [38.541666666666664, 87.083_333_333_333_33, 37.5],
        [18.75, 77.5, 45.833333333333336],
        [6.25, 78.333_333_333_333_33, 45.833333333333336],
        [20.3125, 80.0, 37.5],
        [11.458333333333334, 87.083_333_333_333_33, 37.5],
        [18.75, 77.5, 54.166666666666664],
        [6.25, 78.333_333_333_333_33, 54.166666666666664],
        [20.3125, 80.0, 62.5],
        [11.458333333333334, 87.083_333_333_333_33, 62.5],
        [31.25, 77.5, 54.166666666666664],
        [43.75, 78.333_333_333_333_33, 54.166666666666664],
        [29.6875, 80.0, 62.5],
        [38.541666666666664, 87.083_333_333_333_33, 62.5],
        [18.75, 54.166666666666664, 22.5],
        [6.25, 54.166666666666664, 21.666666666666668],
        [20.3125, 62.5, 20.0],
        [11.458333333333334, 62.5, 12.916666666666666],
        [31.25, 54.166666666666664, 22.5],
        [43.75, 54.166666666666664, 21.666666666666668],
        [29.6875, 62.5, 20.0],
        [38.541666666666664, 62.5, 12.916666666666666],
        [18.75, 45.833333333333336, 22.5],
        [6.25, 45.833333333333336, 21.666666666666668],
        [20.3125, 37.5, 20.0],
        [11.458333333333334, 37.5, 12.916666666666666],
        [31.25, 45.833333333333336, 22.5],
        [43.75, 45.833333333333336, 21.666666666666668],
        [29.6875, 37.5, 20.0],
        [38.541666666666664, 37.5, 12.916666666666666],
        [68.75, 54.166666666666664, 22.5],
        [56.25, 54.166666666666664, 21.666666666666668],
        [70.3125, 62.5, 20.0],
        [61.458333333333336, 62.5, 12.916666666666666],
        [81.25, 54.166666666666664, 22.5],
        [93.75, 54.166666666666664, 21.666666666666668],
        [79.6875, 62.5, 20.0],
        [88.541_666_666_666_67, 62.5, 12.916666666666666],
        [68.75, 45.833333333333336, 22.5],
        [56.25, 45.833333333333336, 21.666666666666668],
        [70.3125, 37.5, 20.0],
        [61.458333333333336, 37.5, 12.916666666666666],
        [81.25, 45.833333333333336, 22.5],
        [93.75, 45.833333333333336, 21.666666666666668],
        [79.6875, 37.5, 20.0],
        [88.541_666_666_666_67, 37.5, 12.916666666666666],
        [81.25, 54.166666666666664, 77.5],
        [93.75, 54.166666666666664, 78.333_333_333_333_33],
        [79.6875, 62.5, 80.0],
        [88.541_666_666_666_67, 62.5, 87.083_333_333_333_33],
        [68.75, 54.166666666666664, 77.5],
        [56.25, 54.166666666666664, 78.333_333_333_333_33],
        [70.3125, 62.5, 80.0],
        [61.458333333333336, 62.5, 87.083_333_333_333_33],
        [81.25, 45.833333333333336, 77.5],
        [93.75, 45.833333333333336, 78.333_333_333_333_33],
        [79.6875, 37.5, 80.0],
        [88.541_666_666_666_67, 37.5, 87.083_333_333_333_33],
        [68.75, 45.833333333333336, 77.5],
        [56.25, 45.833333333333336, 78.333_333_333_333_33],
        [70.3125, 37.5, 80.0],
        [61.458333333333336, 37.5, 87.083_333_333_333_33],
        [81.25, 22.5, 45.833333333333336],
        [93.75, 21.666666666666668, 45.833333333333336],
        [79.6875, 20.0, 37.5],
        [88.541_666_666_666_67, 12.916666666666666, 37.5],
        [68.75, 22.5, 45.833333333333336],
        [56.25, 21.666666666666668, 45.833333333333336],
        [70.3125, 20.0, 37.5],
        [61.458333333333336, 12.916666666666666, 37.5],
        [68.75, 22.5, 54.166666666666664],
        [56.25, 21.666666666666668, 54.166666666666664],
        [70.3125, 20.0, 62.5],
        [61.458333333333336, 12.916666666666666, 62.5],
        [81.25, 22.5, 54.166666666666664],
        [93.75, 21.666666666666668, 54.166666666666664],
        [79.6875, 20.0, 62.5],
        [88.541_666_666_666_67, 12.916666666666666, 62.5],
        [31.25, 54.166666666666664, 77.5],
        [43.75, 54.166666666666664, 78.333_333_333_333_33],
        [29.6875, 62.5, 80.0],
        [38.541666666666664, 62.5, 87.083_333_333_333_33],
        [31.25, 45.833333333333336, 77.5],
        [43.75, 45.833333333333336, 78.333_333_333_333_33],
        [29.6875, 37.5, 80.0],
        [38.541666666666664, 37.5, 87.083_333_333_333_33],
        [31.25, 22.5, 45.833333333333336],
        [43.75, 21.666666666666668, 45.833333333333336],
        [29.6875, 20.0, 37.5],
        [38.541666666666664, 12.916666666666666, 37.5],
        [31.25, 22.5, 54.166666666666664],
        [43.75, 21.666666666666668, 54.166666666666664],
        [29.6875, 20.0, 62.5],
        [38.541666666666664, 12.916666666666666, 62.5],
        [0.0, 0.0, 0.0],
        [100.0, 0.0, 0.0],
        [100.0, 100.0, 0.0],
        [0.0, 100.0, 0.0],
        [0.0, 0.0, 100.0],
        [100.0, 0.0, 100.0],
        [100.0, 100.0, 100.0],
        [0.0, 100.0, 100.0],
        [0.0, 0.0, 87.5],
        [12.5, 0.0, 100.0],
        [0.0, 12.5, 100.0],
        [37.5, 0.0, 100.0],
        [0.0, 0.0, 62.5],
        [0.0, 37.5, 100.0],
        [62.5, 0.0, 100.0],
        [100.0, 0.0, 87.5],
        [87.5, 0.0, 100.0],
        [100.0, 12.5, 100.0],
        [100.0, 0.0, 62.5],
        [100.0, 37.5, 100.0],
        [100.0, 0.0, 37.5],
        [87.5, 0.0, 0.0],
        [100.0, 0.0, 12.5],
        [100.0, 12.5, 0.0],
        [62.5, 0.0, 0.0],
        [100.0, 37.5, 0.0],
        [0.0, 0.0, 37.5],
        [37.5, 0.0, 0.0],
        [0.0, 0.0, 12.5],
        [12.5, 0.0, 0.0],
        [0.0, 12.5, 0.0],
        [0.0, 37.5, 0.0],
        [0.0, 62.5, 100.0],
        [12.5, 100.0, 100.0],
        [0.0, 100.0, 87.5],
        [0.0, 87.5, 100.0],
        [37.5, 100.0, 100.0],
        [0.0, 100.0, 62.5],
        [100.0, 62.5, 100.0],
        [62.5, 100.0, 100.0],
        [100.0, 100.0, 87.5],
        [100.0, 87.5, 100.0],
        [87.5, 100.0, 100.0],
        [100.0, 100.0, 62.5],
        [100.0, 62.5, 0.0],
        [100.0, 100.0, 37.5],
        [100.0, 87.5, 0.0],
        [100.0, 100.0, 12.5],
        [87.5, 100.0, 0.0],
        [62.5, 100.0, 0.0],
        [0.0, 62.5, 0.0],
        [0.0, 100.0, 37.5],
        [37.5, 100.0, 0.0],
        [12.5, 100.0, 0.0],
        [0.0, 100.0, 12.5],
        [0.0, 87.5, 0.0],
        [12.5, 0.0, 87.5],
        [0.0, 12.5, 87.5],
        [12.5, 12.5, 100.0],
        [37.5, 0.0, 87.5],
        [37.5, 12.5, 100.0],
        [37.5, 0.0, 62.5],
        [100.0, 20.833333333333332, 54.166666666666664],
        [12.5, 0.0, 62.5],
        [100.0, 12.5, 62.5],
        [12.5, 37.5, 100.0],
        [37.5, 37.5, 100.0],
        [62.5, 0.0, 87.5],
        [62.5, 12.5, 100.0],
        [87.5, 0.0, 87.5],
        [100.0, 12.5, 87.5],
        [87.5, 12.5, 100.0],
        [87.5, 0.0, 62.5],
        [62.5, 0.0, 62.5],
        [62.5, 37.5, 100.0],
        [87.5, 37.5, 100.0],
        [62.5, 0.0, 37.5],
        [87.5, 0.0, 37.5],
        [87.5, 0.0, 12.5],
        [100.0, 12.5, 12.5],
        [87.5, 12.5, 0.0],
        [62.5, 0.0, 12.5],
        [62.5, 12.5, 0.0],
        [87.5, 37.5, 0.0],
        [62.5, 37.5, 0.0],
        [12.5, 0.0, 37.5],
        [37.5, 0.0, 37.5],
        [0.0, 20.833333333333332, 45.833333333333336],
        [37.5, 0.0, 12.5],
        [37.5, 12.5, 0.0],
        [12.5, 0.0, 12.5],
        [0.0, 12.5, 12.5],
        [12.5, 12.5, 0.0],
        [37.5, 37.5, 0.0],
        [0.0, 12.5, 37.5],
        [12.5, 37.5, 0.0],
        [12.5, 62.5, 100.0],
        [37.5, 62.5, 100.0],
        [12.5, 100.0, 87.5],
        [0.0, 87.5, 87.5],
        [12.5, 87.5, 100.0],
        [37.5, 100.0, 87.5],
        [37.5, 87.5, 100.0],
        [37.5, 100.0, 62.5],
        [12.5, 100.0, 62.5],
        [0.0, 45.833333333333336, 79.166_666_666_666_67],
        [62.5, 62.5, 100.0],
        [87.5, 62.5, 100.0],
        [62.5, 100.0, 87.5],
        [62.5, 87.5, 100.0],
        [100.0, 87.5, 87.5],
        [87.5, 100.0, 87.5],
        [87.5, 87.5, 100.0],
        [0.0, 37.5, 87.5],
        [87.5, 100.0, 62.5],
        [62.5, 100.0, 62.5],
        [0.0, 20.833333333333332, 54.166666666666664],
        [87.5, 62.5, 0.0],
        [0.0, 12.5, 62.5],
        [62.5, 62.5, 0.0],
        [62.5, 100.0, 37.5],
        [87.5, 100.0, 37.5],
        [100.0, 87.5, 12.5],
        [87.5, 100.0, 12.5],
        [0.0, 54.166666666666664, 79.166_666_666_666_67],
        [87.5, 87.5, 0.0],
        [62.5, 100.0, 12.5],
        [62.5, 87.5, 0.0],
        [37.5, 62.5, 0.0],
        [0.0, 62.5, 87.5],
        [12.5, 62.5, 0.0],
        [12.5, 100.0, 37.5],
        [37.5, 100.0, 37.5],
        [37.5, 100.0, 12.5],
        [37.5, 87.5, 0.0],
        [12.5, 100.0, 12.5],
        [0.0, 87.5, 12.5],
        [12.5, 87.5, 0.0],
        [0.0, 31.25, 68.75],
        [0.0, 31.25, 56.25],
        [0.0, 43.75, 68.75],
        [0.0, 43.75, 56.25],
        [100.0, 31.25, 68.75],
        [100.0, 31.25, 56.25],
        [100.0, 43.75, 68.75],
        [100.0, 43.75, 56.25],
        [100.0, 31.25, 43.75],
        [100.0, 31.25, 31.25],
        [100.0, 43.75, 43.75],
        [100.0, 43.75, 31.25],
        [0.0, 31.25, 43.75],
        [0.0, 31.25, 31.25],
        [0.0, 43.75, 43.75],
        [0.0, 43.75, 31.25],
        [0.0, 56.25, 68.75],
        [0.0, 56.25, 56.25],
        [0.0, 68.75, 68.75],
        [0.0, 68.75, 56.25],
        [100.0, 56.25, 68.75],
        [100.0, 56.25, 56.25],
        [100.0, 68.75, 68.75],
        [100.0, 68.75, 56.25],
        [100.0, 56.25, 43.75],
        [100.0, 56.25, 31.25],
        [100.0, 68.75, 43.75],
        [100.0, 68.75, 31.25],
        [0.0, 56.25, 43.75],
        [0.0, 56.25, 31.25],
        [0.0, 68.75, 43.75],
        [0.0, 68.75, 31.25],
        [100.0, 79.166_666_666_666_67, 45.833333333333336],
        [100.0, 87.5, 37.5],
        [100.0, 79.166_666_666_666_67, 54.166666666666664],
        [100.0, 87.5, 62.5],
        [0.0, 79.166_666_666_666_67, 45.833333333333336],
        [0.0, 87.5, 37.5],
        [0.0, 79.166_666_666_666_67, 54.166666666666664],
        [0.0, 87.5, 62.5],
        [0.0, 54.166666666666664, 20.833333333333332],
        [0.0, 62.5, 12.5],
        [0.0, 45.833333333333336, 20.833333333333332],
        [0.0, 37.5, 12.5],
        [100.0, 54.166666666666664, 20.833333333333332],
        [100.0, 62.5, 12.5],
        [100.0, 45.833333333333336, 20.833333333333332],
        [100.0, 37.5, 12.5],
        [100.0, 54.166666666666664, 79.166_666_666_666_67],
        [100.0, 62.5, 87.5],
        [100.0, 45.833333333333336, 79.166_666_666_666_67],
        [100.0, 37.5, 87.5],
        [100.0, 20.833333333333332, 45.833333333333336],
        [100.0, 12.5, 37.5],
    ])
}

#[test]
fn temporary_1() -> Result<(), TestError> {
    use conspire::fem::SecondOrderMinimize;
    let ref_coordinates = coordinates();
    let mut connectivity = connectivity();
    connectivity
        .iter_mut()
        .flatten()
        .for_each(|entry| *entry -= 1);
    let num_nodes = ref_coordinates.len();
    let parameters = &[0.0, 1.0];
    let mut block = ElementBlock::<LinearHexahedron<NeoHookean<_>>, N>::new(
        parameters,
        connectivity,
        coordinates(),
    );
    block.reset();
    let length = ref_coordinates
        .iter()
        .filter(|coordinate| coordinate.iter().any(|c| c == &0.0 || c == &100.0))
        .count()
        * 3;
    let width = num_nodes * 3;
    let mut matrix = Matrix::zero(length, width);
    let mut vector = Vector::zero(length);
    let mut index = 0;
    coordinates()
        .iter()
        .enumerate()
        .for_each(|(node, coordinate)| {
            if coordinate.iter().any(|c| c == &0.0 || c == &100.0) {
                matrix[index][3 * node] = 1.0;
                matrix[index + 1][3 * node + 1] = 1.0;
                matrix[index + 2][3 * node + 2] = 1.0;
                vector[index] = coordinate[0];
                vector[index + 1] = coordinate[1];
                vector[index + 2] = coordinate[2];
                index += 3;
            }
        });
    let time = std::time::Instant::now();
    println!("Solving...");
    let _solution = block.minimize(
        EqualityConstraint::Linear(matrix, vector),
        NewtonRaphson::default(),
    )?;
    println!("Done ({:?}).", time.elapsed());
    // solution.iter().for_each(|coordinate| {
    //     println!(
    //         "{:?} {:?} {:?} 0",
    //         coordinate[0], coordinate[1], coordinate[2]
    //     )
    // });
    Ok(())
}

#[test]
fn temporary_2() -> Result<(), TestError> {
    use conspire::fem::SecondOrderMinimize;
    let ref_coordinates = coordinates();
    let mut connectivity = connectivity();
    connectivity
        .iter_mut()
        .flatten()
        .for_each(|entry| *entry -= 1);
    let num_nodes = ref_coordinates.len();
    let parameters = &[0.0, 1.0];
    let mut block = ElementBlock::<LinearHexahedron<NeoHookean<_>>, N>::new(
        parameters,
        connectivity,
        coordinates(),
    );
    block.reset();
    let length = ref_coordinates
        .iter()
        .map(|coordinate| {
            coordinate
                .iter()
                .filter(|c| c == &&0.0 || c == &&100.0)
                .count()
        })
        .sum::<usize>();
    let width = num_nodes * 3;
    let mut matrix = Matrix::zero(length, width);
    let mut vector = Vector::zero(length);
    let mut index = 0;
    coordinates()
        .iter()
        .enumerate()
        .for_each(|(node, coordinate)| {
            coordinate
                .iter()
                .enumerate()
                .filter(|(_, c)| c == &&0.0 || c == &&100.0)
                .for_each(|(i, &c)| {
                    matrix[index][3 * node + i] = 1.0;
                    vector[index] = c;
                    index += 1;
                })
        });
    let time = std::time::Instant::now();
    println!("Solving...");
    let _solution = block.minimize(
        EqualityConstraint::Linear(matrix, vector),
        NewtonRaphson::default(),
    )?;
    println!("Done ({:?}).", time.elapsed());
    // solution.iter().for_each(|coordinate| {
    //     println!(
    //         "{:?} {:?} {:?} 0",
    //         coordinate[0], coordinate[1], coordinate[2]
    //     )
    // });
    Ok(())
}

#[test]
fn temporary_3() -> Result<(), TestError> {
    use conspire::fem::SecondOrderMinimize;
    let mut connectivity = connectivity();
    connectivity
        .iter_mut()
        .flatten()
        .for_each(|entry| *entry -= 1);
    let parameters = &[0.0, 1.0];
    let mut block = ElementBlock::<LinearHexahedron<NeoHookean<_>>, N>::new(
        parameters,
        connectivity,
        coordinates(),
    );
    block.reset();
    let nodes = coordinates()
        .iter()
        .enumerate()
        .filter(|(_, coordinate)| coordinate.iter().any(|c| c == &0.0 || c == &100.0))
        .map(|(node, _)| node)
        .collect::<Vec<usize>>();
    let indices: Vec<usize> = nodes
        .iter()
        .flat_map(|node| vec![3 * node, 3 * node + 1, 3 * node + 2])
        .collect();
    let time = std::time::Instant::now();
    println!("Solving...");
    let _solution = block.minimize(EqualityConstraint::Fixed(indices), NewtonRaphson::default())?;
    println!("Done ({:?}).", time.elapsed());
    // solution.iter().for_each(|coordinate| {
    //     println!(
    //         "{:?} {:?} {:?} 0",
    //         coordinate[0], coordinate[1], coordinate[2]
    //     )
    // });
    Ok(())
}

#[test]
fn temporary_4() -> Result<(), TestError> {
    use conspire::fem::FirstOrderMinimize;
    let mut connectivity = connectivity();
    connectivity
        .iter_mut()
        .flatten()
        .for_each(|entry| *entry -= 1);
    let parameters = &[0.0, 1.0];
    let mut block = ElementBlock::<LinearHexahedron<NeoHookean<_>>, N>::new(
        parameters,
        connectivity,
        coordinates(),
    );
    block.reset();
    let nodes = coordinates()
        .iter()
        .enumerate()
        .filter(|(_, coordinate)| coordinate.iter().any(|c| c == &0.0 || c == &100.0))
        .map(|(node, _)| node)
        .collect::<Vec<usize>>();
    let indices: Vec<usize> = nodes
        .iter()
        .flat_map(|node| vec![3 * node, 3 * node + 1, 3 * node + 2])
        .collect();
    let time = std::time::Instant::now();
    println!("Solving...");
    let _solution = block.minimize(
        EqualityConstraint::Fixed(indices),
        GradientDescent::default(),
    )?;
    println!("Done ({:?}).", time.elapsed());
    // solution.iter().for_each(|coordinate| {
    //     println!(
    //         "{:?} {:?} {:?} 0",
    //         coordinate[0], coordinate[1], coordinate[2]
    //     )
    // });
    Ok(())
}
