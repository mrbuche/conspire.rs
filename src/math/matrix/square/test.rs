use super::{super::Matrix, SquareMatrix, TensorVec, Vector};
use crate::math::test::{TestError, assert_eq, assert_eq_from_fd};

fn vector_dim_6() -> Vector {
    Vector::new(
        &[2.0, 1.0, 3.0, 2.0, 1.0, 3.0],
    )
}

fn vector_dim_9() -> Vector {
    Vector::new(
        &[2.0, 1.0, 3.0, 2.0, 1.0, 3.0, 1.0, 2.0, 3.0],
    )
}

fn matrix_dim_6_9() -> Matrix {
    [
        Vector::new(&[2.0, 2.0, 4.0, 0.0, 0.0, 1.0, 1.0, 3.0, 3.0]),
        Vector::new(&[0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 4.0, 2.0, 1.0]),
        Vector::new(&[3.0, 0.0, 1.0, 2.0, 0.0, 3.0, 4.0, 4.0, 2.0]),
        Vector::new(&[4.0, 4.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 4.0]),
        Vector::new(&[0.0, 1.0, 0.0, 1.0, 1.0, 3.0, 0.0, 1.0, 1.0]),
        Vector::new(&[4.0, 2.0, 3.0, 4.0, 2.0, 4.0, 3.0, 0.0, 4.0]),
    ].into_iter().collect()
}

fn square_matrix_dim_9() -> SquareMatrix {
    SquareMatrix::new(&[
        &[2.0, 2.0, 4.0, 0.0, 0.0, 1.0, 1.0, 3.0, 3.0],
        &[0.0, 3.0, 1.0, 0.0, 0.0, 1.0, 4.0, 2.0, 1.0],
        &[3.0, 0.0, 1.0, 2.0, 0.0, 3.0, 4.0, 4.0, 2.0],
        &[4.0, 4.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 4.0],
        &[0.0, 1.0, 0.0, 1.0, 1.0, 3.0, 0.0, 1.0, 1.0],
        &[4.0, 2.0, 3.0, 4.0, 2.0, 4.0, 3.0, 0.0, 4.0],
        &[1.0, 3.0, 2.0, 0.0, 0.0, 0.0, 2.0, 4.0, 2.0],
        &[2.0, 2.0, 2.0, 4.0, 1.0, 2.0, 4.0, 2.0, 2.0],
        &[1.0, 2.0, 3.0, 4.0, 0.0, 1.0, 4.0, 2.0, 1.0],
    ])
}

fn other_square_matrix_dim_9() -> SquareMatrix {
    SquareMatrix::new(&[
        &[0.0, 4.0, 2.0, 0.0, 1.0, 4.0, 2.0, 4.0, 1.0],
        &[1.0, 2.0, 2.0, 1.0, 0.0, 3.0, 0.0, 2.0, 0.0],
        &[3.0, 0.0, 2.0, 3.0, 3.0, 0.0, 0.0, 0.0, 2.0],
        &[2.0, 3.0, 0.0, 0.0, 1.0, 3.0, 3.0, 4.0, 2.0],
        &[0.0, 4.0, 1.0, 3.0, 1.0, 1.0, 1.0, 2.0, 1.0],
        &[1.0, 3.0, 0.0, 3.0, 3.0, 2.0, 1.0, 3.0, 4.0],
        &[0.0, 0.0, 0.0, 1.0, 0.0, 3.0, 1.0, 3.0, 4.0],
        &[2.0, 0.0, 4.0, 3.0, 1.0, 2.0, 0.0, 3.0, 4.0],
        &[4.0, 2.0, 0.0, 0.0, 4.0, 0.0, 4.0, 2.0, 2.0],
    ])
}

fn get_vector_mul_matrix_dim_6_9() -> Vector {
    Vector::new(
        &[33.0, 22.0, 21.0, 23.0,  9.0, 29.0, 27.0, 21.0, 34.0],
    )
}

fn get_vector_div_square_matrix_dim_9() -> Vector {
    Vector::new(
        &[1.88365304,  1.08715596,  0.69349458, -0.04587156, -0.68723937,
        1.03085905, -0.40658882,  0.08715596, -2.53377815],
    )
}

fn get_square_matrix_mul_other_square_matrix_dim_9() -> SquareMatrix {
    SquareMatrix::new(&[
        &[33.0, 21.0, 28.0, 27.0, 32.0, 25.0, 18.0, 33.0, 36.0],
        &[15.0, 11.0, 16.0, 19.0, 12.0, 27.0, 9.0, 29.0, 32.0],
        &[26.0, 31.0, 24.0, 28.0, 29.0, 44.0, 27.0, 57.0, 57.0],
        &[25.0, 45.0, 17.0, 10.0, 26.0, 37.0, 32.0, 45.0, 21.0],
        &[12.0, 20.0, 7.0, 16.0, 16.0, 15.0, 11.0, 22.0, 21.0],
        &[39.0, 60.0, 20.0, 32.0, 47.0, 53.0, 45.0, 69.0, 56.0],
        &[25.0, 14.0, 28.0, 23.0, 19.0, 27.0, 12.0, 32.0, 33.0],
        &[30.0, 38.0, 21.0, 27.0, 29.0, 47.0, 31.0, 58.0, 51.0],
        &[28.0, 25.0, 20.0, 24.0, 23.0, 40.0, 23.0, 47.0, 45.0],
    ])
}

fn get_square_matrix_inverse_dim_9() -> SquareMatrix {
    SquareMatrix::new(&[
        &[
            -2.56713928,
            -0.82110092,
            0.48040033,
            -0.40116764,
            -0.27022519,
            2.45954962,
            3.13886572,
            -4.24770642,
            1.81609675,
        ],
        &[
            -1.30275229,
            -0.25229358,
            0.09174312,
            -0.10091743,
            0.0733945,
            1.14678899,
            1.5733945,
            -2.26605505,
            1.10550459,
        ],
        &[
            -0.63386155,
            -0.2706422,
            0.00750626,
            -0.27189324,
            -0.06672227,
            0.86655546,
            0.97873228,
            -1.39449541,
            0.67681401,
        ],
        &[
            0.63302752,
            0.02752294,
            -0.10091743,
            0.21100917,
            0.11926606,
            -0.76146789,
            -0.88073394,
            1.19266055,
            -0.26605505,
        ],
        &[
            -1.67973311,
            -0.64220183,
            -0.13010842,
            -0.6205171,
            -0.17681401,
            1.64637198,
            2.36864053,
            -1.49541284,
            0.26855713,
        ],
        &[
            -0.48040033,
            -0.03669725,
            0.19516264,
            -0.06922435,
            0.26522102,
            0.53044204,
            0.4470392,
            -1.25688073,
            0.5971643,
        ],
        &[
            0.38365304,
            0.33486239,
            -0.03085905,
            0.00667223,
            -0.17014178,
            -0.34028357,
            -0.57923269,
            0.8440367,
            -0.44912427,
        ],
        &[
            -0.30275229,
            -0.25229358,
            0.09174312,
            -0.10091743,
            0.0733945,
            0.14678899,
            0.5733945,
            -0.26605505,
            0.10550459,
        ],
        &[
            4.09341118,
            1.2293578,
            -0.53794829,
            0.81901585,
            0.11509591,
            -3.76980817,
            -4.97581318,
            6.60550459,
            -3.00500417,
        ],
    ])
}

#[test]
fn vector_mul_matrix_dim_6_9() -> Result<(), TestError> {
    assert_eq(
        &(&vector_dim_6() * &matrix_dim_6_9()),
        &get_vector_mul_matrix_dim_6_9(),
    )
}

#[test]
fn asdfasdf() {
    let (l, u) = square_matrix_dim_9().lu_decomposition_inverse();
    println!("\nL: {}\n", l);
    println!("\nU: {}\n", u);
    println!("\nLU: {}\n", u * l);
    println!("\ninv: {}\n", square_matrix_dim_9().inverse());
}

#[test]
fn vector_div_square_matrix_dim_9() -> Result<(), TestError> {
    assert_eq_from_fd(
        &(&vector_dim_9() / &square_matrix_dim_9()),
        &get_vector_div_square_matrix_dim_9(),
    )
}

#[test]
fn square_matrix_mul_other_square_matrix_dim_9() -> Result<(), TestError> {
    assert_eq(
        &(square_matrix_dim_9() * other_square_matrix_dim_9()),
        &get_square_matrix_mul_other_square_matrix_dim_9(),
    )
}

#[test]
fn square_matrix_inverse_dim_9() -> Result<(), TestError> {
    assert_eq_from_fd(
        &square_matrix_dim_9().inverse(),
        &get_square_matrix_inverse_dim_9(),
    )
}
